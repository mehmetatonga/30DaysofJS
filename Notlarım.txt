3**2 == 3 Üzeri 2 demek == 9

let => bilinmeyen türü tanımlama.

console.log(typeof "Mehmet") => typof türü döndürür. => String

// yorum satırı, /* Arası tümden yorum satırı */

const pi = 3.14 => Değişmeyecek bir değer tanımlıyorsan const kullan.

let youtubeChannel = "Mehmet Ali", channelAge = 10, isChannelStillActive = true, secondChannel = null, channelMoney = undefined => Her seferinde let yazmana gerek yok. Tek bir let ve virgül kullanarak değişken tanımlayabilirsin.

console.log(numOne == numTwo) => Karşılaştırma yapar. Eşitse true, değilse false döner.

let name = "Mehmet", name[0]="a" yaparsam, ismin ilk harfini değiştirmez.

let dizi = [1, "Mehmet", true] => dizi türündeki değişkenler birden fazla değişken türünü içinde barındırabilir.

let dizi = [1, "Mehmet", true, []] => Dizi içerisinde dizi de tutulabilir.

console.log(numbers == nums) => false döner çünkü diziler değiştirilebilirdir. Bu yüzden ikisine eşit diyemez. Objelerde de bu durum geçerli.

Math.round => en yakın sayıya yuvarlama işlemi.

Math.floor => en yakın alt tam sayıya yuvarlar.

Math.ceil => en yakın üst tam sayıya yuvarlar.

Math.min(-5, 3, 20, 4, 5, 10) => -5, en küçük sayı.

Math.max(-5, 3, 20, 4, 5, 10) => 20, en büyük sayı.

Math.random() => 0 ile 0.999999 arasında random sayı.

const randNum2=Math.floor(Math.random() * 11) => 0 ile 10 arasında random sayı.

console.log(Math.abs(-10)) => Mutlak değer

console.log(Math.sqrt(100)) => Karekök alma

console.log(Math.pow(3,2)) => Üst alma, 3x3=9

Alt satırda yazdığına devam etmek için ters parantez kullan(\).

console.log(`Selam ${isim}`) => Yazının içerisinde değişken çağırmak istiyorsan yazıyı ` ` bu tırnakların içerisine yaz.

string.toUpperCase() => Harfleri büyütür.

string.toLowerCase() => Harfleri küçültür.

string.substring(4,10) =>  4. indexten itibaren  10. indexe kadar harfleri al. İkinci indexi belirtmeden de kullanabilirsin.

string.substr(4,6) => 4. indexten başla sonraki 6 karakteri al.

string.split(" ") => fonksiyonda belirtilen karakteri gördüğü yerlerden bölerek diziye atama yapar.

console.log(isim.split("").reverse().join("")) => Harflerine ayır, harfleri ters çevir, harfleri birleştir.

string.includes("Java") => string içerisinde fonksiyon içerisindeki kelime geçiyor mu onu kontrol eder. True ya da False döner.

isimSoyisim.replace("Ali", "Curry") => isimSoyisim değişkenindeki "Ali" yerine "Curry" yaz.

isimSoyisim.replaceAll("Ali", "Curry") => isimSoyisim değişkenindeki bütün "Ali" kelimelerinin yerine "Curry" yaz.

string.charCodeAt(index) => indexi belirtilen karakterin ASCII değerini döndürür.

string.indexOf(index) =>  Belirtilen karakterin ilk geldiği yerin indexini bul.

string.lastIndexOf(index) => Belirtilen indexteki karakterin son harfinin indexini bul.

isimSoyisim.startsWith("Mehmet") => Belirtilen değişken indexteki şeyle başlıyor mu? True ya da False döner.

isimSoyisim.endsWith("TONGA") => Belirtilen değişken indexteki şeyle bitiyor mu? True ya da False döner.

isim.repeat(5) => istenen değişken indexte belirtilen kez tekrar edilir.

let num = "10" > parseInt(num) > Number(num) > +num => Bu üç yöntem de string ifadeyi integer ifadeye çevirir.

https://i.hizliresim.com/2t6f1ma.jpg => operatörler

console.log(a==b) => Değer aynı mı diye kontrol eder.(==)

console.log(a===b) => Hem değer hem de değişken türü aynı mı diye kontrol eder.(===)

&& => ve , || => ya da , ! => değil(olumsuzlama, tersine çevirme)

(++a) => ilk işlemden önce değer artar. Direk +1 hali döner.

(a++) => ilk işlemden sonra değer artar. İlk işlem ilk sonunu döndürür, +1 alır. Bu iki durum çıkartma(--a, a--) işlemlerinde de geçerlidir.

isRaining
    ? console.log("It's raining") => True ise bu çıktıyı verir.
    : console.log("It's not raining") => False ise bu çıktıyı verir. İf else gibi düşün.

isRaining ? console.log("It's raining") : console.log("It's not raining") => Aynı işlem tek satırda da yapılabilir.

KOŞUL ? True : False => Bu şekilde öğren.

alert("Selam Canim") => Popup açar. Mesajı yazdırır.

prompt("Bir sayı giriniz.", "Sayı yalnızda pozitif değer olabilir.") => Kullanıcıdan bir girdi istenir. İkinci cümle istenen textbox'ın içerisinde yazan cümledir.

confirm("Emin misin?") => Kullanıcıya evet, hayır sorusu soran popup açar. Tamam seçilirse True, değilse False döner.

https://i.hizliresim.com/bhtbevx.jpg => getDate metodlarının tamamı. (getFullYear, getMonth, getDate,...)

let okunabilirTarih = `${day} ${months[month]} ${year}, ${days[dayNumber]}, ${hours}:${minutes}:${seconds}` => 16 Mart 2024, Cumartesi, 13:11:22 formatında yazar. Yazım şekillerine dikkat et. Diziden eleman çağırırken bu şekilde çağırabilirsin.

const arr = Array() => İçerisine değer girersen o dizinin eleman sayısını belirtmiş olursun.
const arr = [] => İki şekilde de dizi tanımlanabilir.

Objenin içersinde dizi, dizinin içerisinde de obje tutulabilir. => {[]}, [{}]

arr.fill(7) => Diziyi belirtilen elemanla doldurur.

arr1.concat(arr2) => dizi1 ile dizi2 yi birleştirir.

arr.indexOf(1) => Girilen değerin dizide kaçıncı indexte tutulduğunu dönderir. Dizide yoksa -1 döner.

indexOf() => Kullanımının yanında if else ile dizi içerisinde bir elemanın olup olmadığını kontrol edebilirsin.

arr.includes(1) => Dizi içerisinde istenen eleman bulunuyor mu bunun kontrolünü sağlar. True ya da False dönüş yapar.

Array.isArray(arr) => Değişkenin dizi olup olmadığını kontrol eder. True ya da False dönüş yapar.

markalar.toString() => Diziyi stringe çevirir. audi,bmw,mercedes,volkswagen Böyle bir çıktı verir.

arr.join("-") => Dizinin elemanlarını belirtilen ifadeyi aralarına koyarak birleştirir.

arr.slice(1,4) => Dizideki belirtilen indexten itibarenki verileri döndürür. İkinci index dahil değildir. (1. eleman dahil, 4. eleman dahil değil.)

arr.push('eklenecek') => Dizinin sonuna yeni bir eleman ekler

arr.pop() => Dizinin sonundaki elemanı çıkartır.

arr.shift() => Dizinin başındaki elemanı çıkartır.

arr.unshift("ilk eleman") => Dizinin başına eleman ekler.

arr.reverse() => Dizinin elemanlarını tersine çevirir.

arr.sort() => Dizinin elemanlarına alfabetik sıralama uygular.

Döngülerde continue kullanırsan istenen şart sağlanınca o şartı atlar ve devam eder.

Döngülerde break kullanırsan istenen şart sağlanınca döngüyü bitirir.

Bir dizi tanımlanırken kaç parametre geleceğini belirtmeden tanımlarsak, "argument" kullanarak istediğimiz kadar parametre gönderebilir ve bu parametreleri işleme sokabiliriz.(7. günde örneği mevcut)

Fonksiyon Türleri => Declaration Funciton, Expression Funciton, Anonymous Funciton, Arrow Funciton

const sayHello = function(name){ return `Hello ${name}`} => Anonymous(parametre almaz),expression(parametre alır)

;(function(){console.log("Selam")})() => Self Invoking Functions(Kendi kendini çağıran fonksiyonlar) Bu fonksiyonlardan önce noktalı virgül koy yoksa hata alırsın.

Self Invoking Functions(Kendi kendini çağıran foksiyonlar) konusunun 7. günde örnekleri var. İncele

const hello3 = (name, surname) => `Hello ${name} ${surname}` //Arrow functions birden çok parametre de alabilir.

Arrow Function konusunun 7. günde örnekleri var. İncele

var, let ve const kullanarak değişken tanımlanabilir. const kullanıldığında değer değiştirilemez. let kullan.

Değişkenler Window, Global ve Local olmak üzere 3 e ayrılı. 8. gün dersinde detaylı örnekleri var.

Objelerin içerisinde fonksiyon da tanımlanabilir. 8. gün dersinde detaylı örnekleri var.

let newObject = Object.assign({},object) => Eski objeden yeni bir obje yaratmak isteniyorsa bu şekilde yapılır. Birbirlerinden bağımsız 2 obje yaratılmış olur.

let newObject = object => Yapılırsa, bir objede yapılan değiişklik diğer objede de gerçekleşir. Birbirlerine bağımlıdırlar.

Object.keys(object) => Objenin barındırdığı bütün key'leri dönderir.

Object.values(object) => Objenin barındırdığı bütün değerleri dönderir.

Object.entries(object) => Objenin barındırdığı hem key'leri hem değerleri array şeklinde dönderir.

user.hasOwnProperty("country") => Objenin key'leri arasında istenilen değerin olup olmadığını kontrol eder. True ya da False dönüş yapar.

Object.freeze(user) => Bu metodu uygularsan ne yeni bir property tanımlayabilirsin ne de değişiklik yapabilirsin.

Object.seal(user) => Bu metodu uygularsan yeni bir property ekleyemezsin ama mevcut olanları değiştirebilirsin.

numbers.forEach((num) => total += num) => forEach kullanımı.

Fonksiyonlarda parametre olarak yine bir fonksiyon gönderilebilir. 9. gün derslerinde örnekleri var.

setInterval(sayHello,1000) => Belli aralıklarla çalışacak olan fonksiyonlarda kullanılır.

setTimeout(sayHello,1000) => Tek seferlik çalışır. Belirtilen süre sonra aktif olur.

clearInterval(interval) => Önceden devam eden intervali durdurmaya yarar.

clearTimeout(setTimeout) => Halihazırda çalışıyor olan timeOut işlemini iptal eder.

numbers.map(numbers => numbers * 2) => map fonksiyonu sayesinde diziler ve objelerde değişiklikler yapılabilir. 9. gün dersinde örneği var.

const woman = users.filter(user => user.gender === 2) => filter filtrelemeye yarar. User dizisi içerisindeki kadınları filtreler.

numbers.reduce((oldValue, currentValue)=>oldValue + currentValue , 0) => reduce kullanarak da dizinin elemanlarıyla işlem yapılabilir.

users.every(user => user.gender === 1) => Dizideki bütün elemanlar istenilen gibi mi kontrol eder. Biri bile farklıysa false döndürür. True ya da False döndürür.

users.some(user => user.gender === 1) => Dizideki en az bir eleman istenilen gibi mi kontrol eder. True ya da False döndürür.

numbers.find(numbers => numbers > 3) => İstenilen koşulu sağlayan ilk elemanı döndürür.

users.findIndex(users => users.id===3) => İstenilen koşulu sağlayan elemanın index değerini döndürür.

names.sort() => Belirtilen dizinin alfabetik sıraya göre sıralanmasını sağlar. A'dan Z'ye

names.sort((a,b)=> a.localeCompare(b)) => A'dan Z'ye sıralama yapar.

console.log(names.sort((a,b)=> b.localeCompare(a))) => Z'den A'ya sıralama yapar.

sayilar.sort((x,y)=>x-y) => Sayıları küçükten büyüğe sıralama işlemi.

sayilar.sort((x,y)=>y-x) => Sayıları büyükten küçüğe sıralama işlemi.

